method-reference-and-Optional 

before : public abstract methods.
(+)Interface Default and Static Methods 
interface methods with an implementation 
defined behavior. 





(+)Method References
for a lambda expression 
only calls an existing method 


(+)(+) Reference to a Static Method 
Syntax: ContainingClass::methodName
streams api 
call to a static method isRealUser(User user) of the User class

boolean isReal = list.stream().anyMatch(User::isRealUser);



(+)(+)Reference to an Instance Method
syntax containingInstance::methodName
calls method isLegalName(String string) of type User

User user = new User();
boolean isLegalName = list.stream().anyMatch(user::isLegalName);



(+)(+)Reference to an Instance Method of an Object of a Particular Type
syntax ContainingType::methodName

long count = list.stream().filter(String::isEmpty).count();


(+)(+)Reference to a Constructor
syntax ClassName::new
with the help of new as a method name

Stream<User> stream = list.stream().map(User::new);





4.2. Optional<T> Usage
Let's say we expect to get a List<String>, and in the case of null, we want to substitute it with a new instance of an ArrayList<String>.

List<String> listOpt = getList().orElseGet(() -> new ArrayList<>());


Assume we have an object of type User that has a field of type Address with a field street of type String, and we need to return a value of the street field if some exist or a default value if street is null:

Optional<User> user = Optional.ofNullable(getUser());
String result = user
  .map(User::getAddress)
  .map(Address::getStreet)
  .orElse("not specified");


imagine that our getters return Optional<T>.
In this case, we should use the flatMap() method instead of the map():

Optional<OptionalUser> optionalUser = Optional.ofNullable(getOptionalUser());
String result = optionalUser
  .flatMap(OptionalUser::getAddress)
  .flatMap(OptionalAddress::getStreet)
  .orElse("not specified");



use case of Optional is changing NPE with another exception.

String value = null;
Optional<String> valueOpt = Optional.ofNullable(value);
String result = valueOpt.orElseThrow(CustomException::new).toUpperCase();


the case where you are finding the first matching element in a stream. In this case, what should the stream API do if the stream is empty? 
OptionalInt, OptionalLong and OptionalDouble that wrap an int, long and double.

Optional<Person> personResult = findPerson(name);
  Person person = personResult.orElse(Person.GUEST);
  return type(from methods that perform some useful piece of functionality)






stream API 
lambda expressions and functional interfaces 